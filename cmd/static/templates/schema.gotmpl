// Code generated by gnorm, DO NOT EDIT!

package gnorm

import (
"cloud.google.com/go/civil"
"github.com/lib/pq"
"github.com/gofrs/uuid"
"github.com/episub/pqt"
)

{{ range (makeSlice "int" "string" "sql.NullString" "int64" "sql.NullInt64" "float64" "sql.NullFloat64" "bool" "sql.NullBool" "time.Time" "pq.NullTime" "uint32" "byte" "uuid.NullUUID" "pqt.Date" "pqt.NullDate") }}
{{ $fieldName := title (replace . "." "" 1) }}
// {{$fieldName}}Field is a component that returns a WhereClause that contains a
// comparison based on its field and a strongly typed value.
{{$fieldName = replace $fieldName "*" "Null" 1}}
type {{$fieldName}}Field string

// Equals returns a WhereClause for this field.
func (f {{$fieldName}}Field) Equals(v {{.}}) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compEqual,
		value: v,
	}
}

// GreaterThan returns a WhereClause for this field.
func (f {{$fieldName}}Field) GreaterThan(v {{.}}) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compGreater,
		value: v,
	}
}

// LessThan returns a WhereClause for this field.
func (f {{$fieldName}}Field) LessThan(v {{.}}) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compLess,
		value: v,
	}
}

// GreaterOrEqual returns a WhereClause for this field.
func (f {{$fieldName}}Field) GreaterOrEqual(v {{.}}) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compGTE,
		value: v,
	}
}

// LessOrEqual returns a WhereClause for this field.
func (f {{$fieldName}}Field) LessOrEqual(v {{.}}) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compLTE,
		value: v,
	}
}

// NotEqual returns a WhereClause for this field.
func (f {{$fieldName}}Field) NotEqual(v {{.}}) WhereClause {
	return whereClause{
		field: string(f),
		comp:  compNE,
		value: v,
	}
}

// In returns a WhereClause for this field.
func (f {{$fieldName}}Field) In(vals []{{.}}) WhereClause {
	values := make([]interface{}, len(vals))
	for x := range vals {
		values[x] = vals[x]
	}
	return inClause{
		field: string(f),
		values: values,
	}
}

// IsNull returns a WhereClause for matching when this field is null if true is given, otherwise not null
func (f {{$fieldName}}Field) IsNull(is bool) WhereClause {
	return nullClause{
		field: string(f),
		isNull: is,
	}
}

// IsLike returns a WhereClause for 'like', but will only work for some types even though it's created for all
func (f {{$fieldName}}Field) IsLikeLower(v string) WhereClause {
	fnc := func(idx *int) string {
		return fmt.Sprintf("LOWER(%s) LIKE LOWER('%%' || $%d || '%%')",  string(f), *idx)
	}
	return NewCustomClause(fnc, v)
}

{{end}}
